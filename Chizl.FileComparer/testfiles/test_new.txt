using System;
using System.Diagnostics;
using System.Drawing;
using System.IO2;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using TextManagers;

namespace IGNORE_ME
{
    public class TestClass
    {
        delegate void StringBoolDelegate(string s, bool b);
        delegate void StringDelegate(string s);

        private readonly STreeMap tMap = new STreeMap();
        private readonly LogMgr logger = new LogMgr();
        private readonly LoadDataInfo loadData = new LoadDataInfo();
        // private Label HoverLable = new Label() { Name = "HoverLbl", BackColor = Color.FromArgb(255, 0, 0, 0), Visible = false };
        private string currentMouseOver = string.Empty;
        private Thread threadScan;

        #region Constructor
        public FrmMain()
        {
            InitializeComponent();
            this.Text = $"{AppTitle} v{About.ProductVersion.MajorMinor}";
        }
        #endregion

        #region Private Methods
        private void SetEnable(string cntrlName, bool enable)
        {
            if (InvokeRequired)
            {
                var d = new StringBoolDelegate(SetEnable);
                if (!Disposing && !IsDisposed)
                {
                    try { Invoke(d, cntrlName, enable); }
                    catch (ObjectDisposedException ex) { Debug.WriteLine(ex.Message); }
                    catch { }
                }
            }
            else if (!Disposing && !IsDisposed)
            {
                Control ctn = FindControlByName(this, cntrlName);
                if (ctn != null)
                    ctn.Enabled = enable;
            }
        }
        private void SetVisible(string cntrlName, bool visible)
        {
            if (InvokeRequired)
            {
                var d = new StringBoolDelegate(SetVisible);
                if (!Disposing && !IsDisposed)
                {
                    try { Invoke(d, cntrlName, visible); }
                    catch (ObjectDisposedException ex) { Debug.WriteLine(ex.Message); }
                    catch { }
                }
            }
            else if (!Disposing && !IsDisposed)
            {
                Control ctn = FindControlByName(this, cntrlName);
                if (ctn != null)
                    ctn.Visible = visible;
            }
        }
        private void SetStatus(string status)
        {
            if (InvokeRequired)
            {
                var d = new StringDelegate(SetStatus);
                if (!Disposing && !IsDisposed)
                {
                    try { Invoke(d, status); }
                    catch (ObjectDisposedException ex) { Debug.WriteLine(ex.Message); }
                    catch { }
                }
            }
            else if (!Disposing && !IsDisposed)
            {
                ToolStripItem tsi = FindToolStripItemByName(MainStatusStrip, "ToolStatus");
                if (tsi != null)
                    tsi.Text = status;
                else
                    this.ToolStatus.Text = status;

                this.TreeMapPanel.Invalidate();
                ButtonStatus();
            }
        }
        private void StartScan(string path, bool startOver)
        {
            if ((threadScan == null || !threadScan.IsAlive) && !string.IsNullOrWhiteSpace(path))
            {
                this.LblCurrentPath.Text = path;

                var dirInfo = new DirectoryInfo(path);
                if (dirInfo.Exists)
                {
                    threadScan = new Thread(() =>
                    {
                        DateTime dtStart = DateTime.Now;
                        bool success = loadData.StartScan(path, startOver);
                        SetVisible("ButtonStopScan", false);
                        SetVisible("ButtonStartScan", true);
                        TimeSpan tsLength = DateTime.Now.Subtract(dtStart);

                        if (!success)
                        {
                            string msg = loadData.LastError != null ?
                                            $"Scan failed - {loadData.LastError.Message}" :
                                            "Unknown Exception Occured";

                            SetStatus(msg);
                            MessageBox.Show(msg, About.AppTitle, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            SetStatus($"Scan completed in {tsLength.TotalSeconds}s.\nFiles: {loadData.CurrentScanFolderDetails.TotalFileCount}, Folders: {loadData.CurrentScanFolderDetails.TotalDirectoryCount}\nTotal Byte Size: {loadData.CurrentScanFolderDetails.TotalFileByteSize}, Total Size: {Common.FormatByteSize(loadData.CurrentScanFolderDetails.TotalFileByteSize)}");
                        }

                        return;
                    });

                    if (startOver)
                    {
                        loadData.OrgScanFolderDetails = new FolderData();
                        loadData.CurrentScanFolderDetails = new FolderData();
                    }

                    SetVisible("ButtonStartScan", false);
                    SetVisible("ButtonStopScan", true);
                    SetStatus("Scan started...");
                    threadScan.Start();
                }
            }
        }
        private void StopScan()
        {
            if (loadData.IsScanning)
                loadData.StopScan();

            while (loadData.IsScanning)
                Thread.Sleep(0);    // cycle cpu
        }
        private void ButtonStatus()
        {
            if (loadData.CurrentScanFolderDetails.FullPath == loadData.OrgScanFolderDetails.FullPath)
            {
                BtnBackFolder.Enabled = false;
                BtnRoot.Enabled = false;
            }
            else
            {
                BtnRoot.Enabled = true;
                BtnBackFolder.Enabled = true;
            }
        }
        private void ShowHoverInfo(string info, PointF loc)
        {
            if (loc == PointF.Empty)
                LblHoverInfo.Visible = false;
            else
            {
                if (!string.IsNullOrWhiteSpace(info))
                    LblHoverInfo.Text = info;

                LblHoverInfo.Location = new Point((int)loc.X, (int)loc.Y);

                if (!LblHoverInfo.Visible)
                    LblHoverInfo.Visible = true;
            }
        }
        /// <summary>
        /// Only for controls, not ToolStripItems
        /// </summary>
        /// <param name="parent"></param>
        /// <param name="cntrlName"></param>
        /// <returns></returns>
        private Control FindControlByName(Control parent, string cntrlName)
        {
            foreach (Control ctrl in parent.Controls)
            {
                if (ctrl.Name == cntrlName)
                    return ctrl;
            }

            foreach (Control ctrl in parent.Controls)
            {
                Control retVal = FindControlByName(ctrl, cntrlName);
                if (retVal != null)
                    return retVal;
            }

            return null;
        }
        /// <summary>
        /// Only for controls, is not ToolStripItems
        /// </summary>
        /// <param name="parent"></param>
        /// <param name="cntrlName"></param>
        /// <returns></returns>
        private ToolStripItem FindToolStripItemByName(ToolStrip parent, string tsiName)
        {
            ToolStripItem retVal = parent.Items[tsiName];
            if (retVal != null)
                return retVal;

            foreach (ToolStripItem tsi in parent.Items)
            {
                if (tsi.Name == tsiName)
                    return tsi;
            }

            foreach (ToolStrip ctrl in parent.Items)
            {
                retVal = FindToolStripItemByName(ctrl, tsiName);
                if (retVal != null)
                    return retVal;
            }

            return null;
        }
        #endregion

        #region Private Control Events
        private void FrmMain_Resize(object sender, EventArgs e)
        {
            this.TreeMapPanel.Invalidate();
        }
        private void FrmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            StopScan();
            logger?.Dispose();
        }
        private void ButtonStartScan_Click(object sender, EventArgs e)
        {
            string path = this.CmbStartingDriveOrPath.Text.Trim();
            StartScan(path, true);

        }
        private void ButtonStopScan_Click(object sender, EventArgs e)
        {
            StopScan();
        }
        private void TreeMapPanel_Paint(object sender, PaintEventArgs e)
        {
            Graphics gfx = e.Graphics;
            gfx.Clear(Color.Gray);

            if (loadData.CurrentScanFolderDetails.TotalFileByteSize <= 0)
                return;

            tMap.DrawCharts(gfx, loadData.CurrentScanFolderDetails, this.TreeMapPanel.Size);
        }
        private void LblHoverInfo_MouseMove(object sender, MouseEventArgs e)
        {
            LblHoverInfo.Visible = false;
        }
        private object lastMOObject = null;
        private void TreeMapPanel_MouseMove(object sender, MouseEventArgs e)
        {
            Point spacing = new Point(10, 30);
            var newLastMOObject = loadData.GetPathByPointer(e.Location);
            StringBuilder sb = new StringBuilder();
            PointF point = PointF.Empty;

            if (newLastMOObject != lastMOObject)
            {
                lastMOObject = newLastMOObject;
                if (lastMOObject?.GetType().Name == "FileData")
                {
                    FileData file = lastMOObject as FileData;
                    this.currentMouseOver = file.FullName;

                    point = new PointF(file.Rectangle.Location.X + spacing.X, file.Rectangle.Location.Y + spacing.Y);

                    if (file.Valid)
                    {
                        sb.AppendLine($"Created: {file.CreatedDate}");
                        sb.AppendLine($"Modified: {file.ModifiedDate}");
                        sb.AppendLine($"Size: {file.TotalByteSize}b");
                    }
                    else
                        sb.AppendLine($"Error: {file.Info}");

                    ShowHoverInfo(sb.ToString(), point);
                }
                else if (lastMOObject?.GetType().Name == "FolderData")
                {
                    FolderData folder = lastMOObject as FolderData;
                    this.currentMouseOver = folder.FullPath;

                    point = new PointF(folder.Rectangle.Location.X + spacing.X, folder.Rectangle.Location.Y + spacing.Y);

                    if (folder.Valid)
                    {
                        sb.AppendLine($"Created: {folder.CreatedDate}");
                        sb.AppendLine($"Modified: {folder.ModifiedDate}");
                        sb.AppendLine($"Size: {folder.TotalFileByteSize}b");
                        sb.AppendLine($"Files: {folder.TotalFileCount}");
                        sb.AppendLine($"Folders: {folder.TotalDirectoryCount}");
                    }
                    else
                        sb.AppendLine($"Error: {folder.Info}");

                    ShowHoverInfo(sb.ToString(), point);
                }
                else
                    ShowHoverInfo(sb.ToString(), point);
            }
        }
        private void TreeMapPanel_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (ButtonStartScan.Enabled && !string.IsNullOrWhiteSpace(this.currentMouseOver) && Directory.Exists(this.currentMouseOver))
            {
                StartScan(this.currentMouseOver, false);
                ButtonStatus();
            }
        }
        private void BtnRoot_Click(object sender, EventArgs e)
        {
            StartScan(loadData.OrgScanFolderDetails.FullPath, false);
            ButtonStatus();
        }
        private void BtnBackFolder_Click(object sender, EventArgs e)
        {
            if (loadData.CurrentScanFolderDetails.FullPath != loadData.OrgScanFolderDetails.FullPath)
            {
                string backPath = loadData.CurrentScanFolderDetails.FullPath.Substring(0, loadData.CurrentScanFolderDetails.FullPath.LastIndexOf("\\"));
                StartScan(backPath, false);
            }

            ButtonStatus();
        }
        #endregion
    }
}
