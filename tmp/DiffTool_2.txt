using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;

namespace Chizl.FileCompare
{
    public sealed class DiffTool
    {
        /// <summary>
        /// Load files as binary, then convert to string hex format for side by side view of next binary load file.
        /// </summary>
        /// <param name="fullPath"></param>
        /// <param name="returnArr"></param>
        /// <param name="errorMsg"></param>
        /// <returns></returns>
        public static ByteLineLevel[] ShowInHex(string fullPath)
        {
            var binHexViewList = new List<ByteLineLevel>();

            try
            {
                using (FileStream fs = new FileStream(fullPath, FileMode.Open, FileAccess.Read))
                {
                    int bytesRead;
                    byte[] buffer = new byte[16]; // Read 16 bytes at a time for a typical hex view layout
                    int offset = 0;
                    int lineNo = 1;
                    while ((bytesRead = fs.Read(buffer, 0, buffer.Length)) > 0)
                    {
                        var bhView = new ByteLineLevel(FileFormat.Binary, lineNo++);
                        // Display offset
                        bhView.AddOffset($"{offset:X8}:");

                        // Display hex values
                        for (int i = 0; i < bytesRead; i++)
                            bhView.AddToHexStr((char)buffer[i]);

                        binHexViewList.Add(bhView);
                        offset += bytesRead;
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Exception in ShowInHex(\"{fullPath}\"):\n{ex.Message}");
            }

            return binHexViewList.ToArray();
        }

        public static ComparisonResults CompareFiles(
            string sourceFile, string targetFile,
            double scoreThreshold = 0.30, byte lineLookAhead = 3)
        {
            if (!File.Exists(sourceFile))
                return new ComparisonResults(new ArgumentException($"{nameof(sourceFile)} not found"));
            if (!File.Exists(targetFile))
                return new ComparisonResults(new ArgumentException($"{nameof(targetFile)} not found"));

            var srcLines = ReadLines(sourceFile).ToList();
            var trgLines = ReadLines(targetFile).ToList();

            // You could stream these directly, but for now keep them in lists
            var edits = MyersDiff(srcLines, trgLines);

            var results = new List<CompareDiff>();
            int lineNo = 0;

            foreach (var (tag, text) in edits)
            {
                DiffType diffType;
                switch(tag)
                {
                    case "+":
                        diffType = DiffType.Added;
                        break;
                    case "-":
                        diffType = DiffType.Deleted;
                        break;
                    case "~":
                        diffType = DiffType.Modified;
                        break;
                    default:
                        diffType = DiffType.None;
                        break;
                };

                results.Add(new CompareDiff(diffType, ++lineNo, text));
            }

            return new ComparisonResults(results, false);
        }

        // Myers algorithm implementation
        public static List<(string Tag, string Text)> MyersDiff(
            IList<string> a, IList<string> b)
        {
            var result = new List<(string, string)>();
            var ses = MyersDiffInternal(a, b);
            foreach (var (op, i1, i2, j1, j2) in ses)
            {
                if (op == ' ')
                {
                    for (int i = i1; i < i2; i++)
                        result.Add((" ", a[i]));
                }
                else if (op == '-')
                {
                    for (int i = i1; i < i2; i++)
                        result.Add(("-", a[i]));
                }
                else if (op == '+')
                {
                    for (int j = j1; j < j2; j++)
                        result.Add(("+", b[j]));
                }
            }
            return result;
        }

        // Minimal Myers diff engine
        private static List<(char op, int i1, int i2, int j1, int j2)>
            MyersDiffInternal(IList<string> a, IList<string> b)
        {
            int n = a.Count, m = b.Count;
            int max = n + m;
            var v = new Dictionary<int, int> { [1] = 0 };
            var trace = new List<Dictionary<int, int>>();

            for (int d = 0; d <= max; d++)
            {
                var vCopy = new Dictionary<int, int>(v);
                trace.Add(vCopy);

                for (int k = -d; k <= d; k += 2)
                {
                    int x;
                    if (k == -d || (k != d && v[k - 1] < v[k + 1]))
                        x = v[k + 1];
                    else
                        x = v[k - 1] + 1;
                    int y = x - k;

                    while (x < n && y < m && a[x] == b[y])
                    {
                        x++;
                        y++;
                    }
                    v[k] = x;

                    if (x >= n && y >= m)
                        return Backtrack(trace, a, b);
                }
            }
            throw new Exception("Diff failed");
        }

        private static List<(char op, int i1, int i2, int j1, int j2)>
            Backtrack(List<Dictionary<int, int>> trace,
                      IList<string> a, IList<string> b)
        {
            int x = a.Count, y = b.Count;
            var result = new List<(char, int, int, int, int)>();

            for (int d = trace.Count - 1; d >= 0; d--)
            {
                var v = trace[d];
                int k = x - y;
                int prevK;
                int prevX;

                if (k == -d || (k != d && v[k - 1] < v[k + 1]))
                {
                    prevK = k + 1;
                    prevX = v[prevK];
                }
                else
                {
                    prevK = k - 1;
                    prevX = v[prevK] + 1;
                }

                int prevY = prevX - prevK;

                while (x > prevX && y > prevY)
                {
                    result.Add((' ', x - 1, x, y - 1, y));
                    x--;
                    y--;
                }

                if (d > 0)
                {
                    if (x == prevX)
                    {
                        result.Add(('+', x, x, prevY, y));
                    }
                    else
                    {
                        result.Add(('-', prevX, x, y, y));
                    }
                }

                x = prevX;
                y = prevY;
            }

            result.Reverse();
            return result;
        }
        private static IEnumerable<string> ReadLines(string filePath)
        {
            using (var reader = new StreamReader(filePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    yield return line;
                }
            }
        }

    }
}
